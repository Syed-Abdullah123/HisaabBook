import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  FlatList,
  Platform,
  LogBox,
  ActivityIndicator,
  Share,
  Alert,
  PermissionsAndroid,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { SafeAreaView } from "react-native-safe-area-context";
import DateTimePicker from "@react-native-community/datetimepicker";
import auth from "@react-native-firebase/auth";
import {
  collection,
  query,
  where,
  onSnapshot,
  orderBy,
} from "@react-native-firebase/firestore";
import { firestore } from "../../firebaseConfig";
import { useNavigation } from "@react-navigation/native";
import * as FileSystem from "expo-file-system";
import * as Sharing from "expo-sharing";
import * as Print from "expo-print";

type Transaction = {
  id: string;
  contactName: string;
  date: Date;
  type: "diye" | "liye";
  amount: number;
};

const AllKhaataScreen = () => {
  const navigation = useNavigation();
  const user = auth().currentUser;
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [startDate, setStartDate] = useState<Date | null>(null);
  const [endDate, setEndDate] = useState<Date | null>(null);
  const [showStartPicker, setShowStartPicker] = useState(false);
  const [showEndPicker, setShowEndPicker] = useState(false);
  const [loading, setLoading] = useState(true);
  const [sharing, setSharing] = useState(false);
  const [downloading, setDownloading] = useState(false);

  useEffect(() => {
    if (!user) return;
    let q = query(
      collection(firestore, "transactions"),
      where("userId", "==", user.uid),
      orderBy("date", "desc")
    );
    const unsubscribe = onSnapshot(q, (snapshot) => {
      if (!snapshot) return; // defensive skip if snapshot is null
      const list: Transaction[] = [];
      snapshot.forEach((doc) => {
        const data = doc.data();
        if (
          !data ||
          !data.contactName ||
          !data.date ||
          !data.type ||
          !data.amount
        )
          return;
        const txDate =
          data.date && data.date.toDate ? data.date.toDate() : new Date();
        list.push({
          id: doc.id,
          contactName: data.contactName,
          date: txDate,
          type: data.type,
          amount: data.amount,
        });
      });
      setTransactions(list);
      setLoading(false);
    });
    return () => unsubscribe();
  }, [user]);

  // Filter by date range
  const filteredTransactions = transactions.filter((tx) => {
    if (startDate && tx.date < startDate) return false;
    if (endDate && tx.date > endDate) return false;
    return true;
  });

  // Date formatting
  const formatDate = (date: Date) =>
    date.toLocaleDateString("en-GB", {
      day: "numeric",
      month: "short",
      year: "numeric",
    }) +
    ", " +
    date.toLocaleTimeString("en-GB", {
      hour: "2-digit",
      minute: "2-digit",
      hour12: true,
    });

  // Generate text report for sharing
  const generateTextReport = () => {
    const user = auth().currentUser;
    const businessName = user?.displayName || "Business";

    let report = `📊 *${businessName} - Transaction Report*\n\n`;

    if (startDate || endDate) {
      report += `📅 *Date Range:* `;
      if (startDate) report += `${formatDate(startDate).split(",")[0]} `;
      if (endDate) report += `to ${formatDate(endDate).split(",")[0]}\n\n`;
    }

    report += `📋 *Total Transactions:* ${filteredTransactions.length}\n\n`;

    // Calculate totals
    const totalDiye = filteredTransactions
      .filter((tx) => tx.type === "diye")
      .reduce((sum, tx) => sum + tx.amount, 0);

    const totalLiye = filteredTransactions
      .filter((tx) => tx.type === "liye")
      .reduce((sum, tx) => sum + tx.amount, 0);

    report += `💰 *Total Maine Diye:* Rs. ${totalDiye}\n`;
    report += `💰 *Total Maine Liye:* Rs. ${totalLiye}\n`;
    report += `💵 *Net Balance:* Rs. ${totalLiye - totalDiye}\n\n`;

    report += `📝 *Recent Transactions:*\n`;
    filteredTransactions.slice(0, 10).forEach((tx, index) => {
      const emoji = tx.type === "diye" ? "📤" : "📥";
      const amount =
        tx.type === "diye" ? `-Rs. ${tx.amount}` : `+Rs. ${tx.amount}`;
      report += `${index + 1}. ${emoji} ${tx.contactName} - ${amount}\n`;
    });

    if (filteredTransactions.length > 10) {
      report += `\n... and ${
        filteredTransactions.length - 10
      } more transactions`;
    }

    report += `\n\n📱 *Generated by HisabBook App*`;

    return report;
  };

  // Generate HTML report for PDF
  const generateHTMLReport = () => {
    const user = auth().currentUser;
    const businessName = user?.displayName || "Business";

    const totalDiye = filteredTransactions
      .filter((tx) => tx.type === "diye")
      .reduce((sum, tx) => sum + tx.amount, 0);

    const totalLiye = filteredTransactions
      .filter((tx) => tx.type === "liye")
      .reduce((sum, tx) => sum + tx.amount, 0);

    const html = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>${businessName} - Transaction Report</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .header { text-align: center; margin-bottom: 30px; }
            .summary { background: #f5f5f5; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
            .summary-row { display: flex; justify-content: space-between; margin: 5px 0; }
            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
            th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
            th { background-color: #f2f2f2; font-weight: bold; }
            .diye { color: #F00000; }
            .liye { color: #00A86B; }
            .footer { margin-top: 30px; text-align: center; color: #666; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>${businessName}</h1>
            <h2>Transaction Report</h2>
            ${
              startDate || endDate
                ? `<p>Date Range: ${
                    startDate ? formatDate(startDate).split(",")[0] : "Start"
                  } ${
                    endDate
                      ? "to " + formatDate(endDate).split(",")[0]
                      : "to End"
                  }</p>`
                : ""
            }
          </div>
          
          <div class="summary">
            <div class="summary-row">
              <strong>Total Transactions:</strong> <span>${
                filteredTransactions.length
              }</span>
            </div>
            <div class="summary-row">
              <strong>Total Maine Diye:</strong> <span class="diye">Rs. ${totalDiye}</span>
            </div>
            <div class="summary-row">
              <strong>Total Maine Liye:</strong> <span class="liye">Rs. ${totalLiye}</span>
            </div>
            <div class="summary-row">
              <strong>Net Balance:</strong> <span style="color: ${
                totalLiye - totalDiye >= 0 ? "#00A86B" : "#F00000"
              }">Rs. ${totalLiye - totalDiye}</span>
            </div>
          </div>
          
          <table>
            <thead>
              <tr>
                <th>Date</th>
                <th>Contact</th>
                <th>Maine Diye</th>
                <th>Maine Liye</th>
              </tr>
            </thead>
            <tbody>
              ${filteredTransactions
                .map(
                  (tx) => `
                <tr>
                  <td>${formatDate(tx.date).split(",")[0]}</td>
                  <td>${tx.contactName}</td>
                  <td class="diye">${
                    tx.type === "diye" ? `Rs. ${tx.amount}` : "-"
                  }</td>
                  <td class="liye">${
                    tx.type === "liye" ? `Rs. ${tx.amount}` : "-"
                  }</td>
                </tr>
              `
                )
                .join("")}
            </tbody>
          </table>
          
          <div class="footer">
            <p>Generated by HisabBook App on ${new Date().toLocaleDateString()}</p>
          </div>
        </body>
      </html>
    `;

    return html;
  };

  // Share functionality
  const handleShare = async () => {
    if (sharing) return;

    setSharing(true);
    try {
      const report = generateTextReport();

      const result = await Share.share({
        message: report,
        title: "HisabBook Transaction Report",
      });

      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          console.log("Shared with activity type:", result.activityType);
        } else {
          console.log("Shared");
        }
      } else if (result.action === Share.dismissedAction) {
        console.log("Share dismissed");
      }
    } catch (error) {
      console.error("Error sharing:", error);
      Alert.alert("Error", "Failed to share report");
    } finally {
      setSharing(false);
    }
  };

  // Download functionality
  const handleDownload = async () => {
    if (downloading) return;

    setDownloading(true);
    try {
      // Check permissions on Android
      if (Platform.OS === "android") {
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
          {
            title: "Storage Permission",
            message: "App needs access to storage to save the PDF report.",
            buttonNeutral: "Ask Me Later",
            buttonNegative: "Cancel",
            buttonPositive: "OK",
          }
        );
        if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
          Alert.alert(
            "Permission Denied",
            "Storage permission is required to save the PDF"
          );
          return;
        }
      }

      // Generate PDF
      const html = generateHTMLReport();
      const { uri } = await Print.printToFileAsync({ html });

      // Create filename with timestamp
      const timestamp = new Date().toISOString().split("T")[0];
      const filename = `HisabBook_Report_${timestamp}.pdf`;

      // Copy to documents directory
      const documentsDir = FileSystem.documentDirectory;
      const destinationUri = `${documentsDir}${filename}`;

      await FileSystem.copyAsync({
        from: uri,
        to: destinationUri,
      });

      // Share the PDF file
      if (await Sharing.isAvailableAsync()) {
        await Sharing.shareAsync(destinationUri, {
          mimeType: "application/pdf",
          dialogTitle: "Save HisabBook Report",
        });
      } else {
        Alert.alert(
          "Success",
          `PDF saved successfully!\nLocation: ${destinationUri}`,
          [{ text: "OK" }]
        );
      }
    } catch (error) {
      console.error("Error downloading PDF:", error);
      Alert.alert("Error", "Failed to generate PDF report");
    } finally {
      setDownloading(false);
    }
  };

  LogBox.ignoreLogs([
    "Warning: Text strings must be rendered within a <Text> component",
  ]);

  // Render each row
  const renderRow = ({ item }: { item: Transaction }) => (
    <View style={styles.tableRow}>
      <View style={{ flex: 1 }}>
        <Text style={styles.contactName}>{item.contactName}</Text>
        <Text style={styles.dateText}>{formatDate(item.date)}</Text>
      </View>
      <View style={styles.amountCol}>
        {item.type === "diye" ? (
          <Text style={styles.amountDiye}>Rs. {item.amount}</Text>
        ) : null}
      </View>
      <View style={styles.amountCol}>
        {item.type === "liye" ? (
          <Text style={styles.amountLiye}>Rs. {item.amount}</Text>
        ) : null}
      </View>
    </View>
  );

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: "#fff" }}>
      {/* Header */}
      <View style={styles.headerRow}>
        <TouchableOpacity
          onPress={() => navigation.goBack()}
          hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
        >
          <Ionicons name="chevron-back" size={24} color="#222" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Sare Contacts ki Report</Text>
        <View style={{ width: 28 }}>
          <Text> </Text>
        </View>
      </View>

      {/* Date Filters */}
      <View style={styles.dateFilterRow}>
        <TouchableOpacity
          style={styles.datePickerBtn}
          onPress={() => setShowStartPicker(true)}
        >
          <Ionicons name="calendar-outline" size={18} color="#2F51FF" />
          <Text style={styles.datePickerText}>
            {startDate ? formatDate(startDate).split(",")[0] : "Start Date"}
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.datePickerBtn}
          onPress={() => setShowEndPicker(true)}
        >
          <Ionicons name="calendar-outline" size={18} color="#2F51FF" />
          <Text style={styles.datePickerText}>
            {endDate ? formatDate(endDate).split(",")[0] : "End Date"}
          </Text>
        </TouchableOpacity>
      </View>
      {showStartPicker && (
        <DateTimePicker
          value={startDate || new Date()}
          mode="date"
          display={Platform.OS === "ios" ? "spinner" : "default"}
          onChange={(_, date) => {
            setShowStartPicker(false);
            if (date) setStartDate(date);
          }}
        />
      )}
      {showEndPicker && (
        <DateTimePicker
          value={endDate || new Date()}
          mode="date"
          display={Platform.OS === "ios" ? "spinner" : "default"}
          onChange={(_, date) => {
            setShowEndPicker(false);
            if (date) setEndDate(date);
          }}
        />
      )}

      {/* Table Header */}
      <View style={styles.tableHeaderRow}>
        <Text style={[styles.tableHeader, { flex: 1 }]}>Date</Text>
        <Text style={styles.tableHeader}>Maine Diye</Text>
        <Text style={styles.tableHeader}>Maine Liye</Text>
      </View>
      {loading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#2F51FF" />
        </View>
      ) : (
        <FlatList
          data={filteredTransactions}
          keyExtractor={(item) => item.id}
          renderItem={renderRow}
          contentContainerStyle={{ paddingBottom: 120 }}
          ListEmptyComponent={
            <Text style={{ textAlign: "center", color: "#888", marginTop: 32 }}>
              No transactions found for this filter.
            </Text>
          }
        />
      )}

      {/* Share & Download Buttons */}
      <View style={styles.bottomRow}>
        <TouchableOpacity
          style={[styles.shareBtn, sharing && styles.disabledBtn]}
          onPress={handleShare}
          disabled={sharing}
        >
          {sharing ? (
            <ActivityIndicator
              size="small"
              color="#fff"
              style={{ marginRight: 8 }}
            />
          ) : (
            <Ionicons
              name="logo-whatsapp"
              size={22}
              color="#fff"
              style={{ marginRight: 8 }}
            />
          )}
          <Text style={styles.shareBtnText}>
            {sharing ? "Sharing..." : "Share"}
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.downloadBtn, downloading && styles.disabledBtn]}
          onPress={handleDownload}
          disabled={downloading}
        >
          {downloading ? (
            <ActivityIndicator
              size="small"
              color="#fff"
              style={{ marginRight: 8 }}
            />
          ) : (
            <Ionicons
              name="download-outline"
              size={22}
              color="#fff"
              style={{ marginRight: 8 }}
            />
          )}
          <Text style={styles.downloadBtnText}>
            {downloading ? "Generating..." : "Download"}
          </Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

export default AllKhaataScreen;

const styles = StyleSheet.create({
  headerRow: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 18,
    paddingTop: 18,
    paddingBottom: 8,
  },
  headerTitle: {
    flex: 1,
    textAlign: "center",
    fontSize: 18,
    fontWeight: "bold",
    color: "#222",
  },
  dateFilterRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    paddingHorizontal: 18,
    marginTop: 18,
    marginBottom: 8,
    gap: 12,
  },
  datePickerBtn: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#F5F5F5",
    padding: 12,
    borderRadius: 12,
    marginHorizontal: 4,
  },
  datePickerText: {
    color: "#222",
    fontSize: 14,
    marginLeft: 8,
  },
  tableHeaderRow: {
    flexDirection: "row",
    paddingHorizontal: 18,
    paddingVertical: 10,
    backgroundColor: "#F5F5F5",
  },
  tableHeader: {
    fontSize: 14,
    fontWeight: "600",
    color: "#666",
    width: 100,
    textAlign: "center",
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  tableRow: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 18,
    paddingVertical: 14,
    borderBottomWidth: 1,
    borderBottomColor: "#F0F0F0",
    backgroundColor: "#fff",
  },
  contactName: {
    fontSize: 15,
    fontWeight: "bold",
    color: "#222",
  },
  dateText: {
    fontSize: 12,
    color: "#888",
  },
  amountCol: {
    width: 100,
    alignItems: "center",
  },
  amountDiye: {
    fontSize: 14,
    color: "#F00000",
    fontWeight: "500",
  },
  amountLiye: {
    fontSize: 14,
    color: "#00A86B",
    fontWeight: "500",
  },
  bottomRow: {
    position: "absolute",
    left: 18,
    right: 18,
    bottom: 50,
    flexDirection: "row",
    gap: 12,
  },
  shareBtn: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#25D366",
    borderRadius: 12,
    padding: 16,
    justifyContent: "center",
  },
  shareBtnText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "600",
  },
  downloadBtn: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#2F51FF",
    borderRadius: 12,
    padding: 16,
    justifyContent: "center",
  },
  downloadBtnText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "600",
  },
  disabledBtn: {
    opacity: 0.6,
  },
});
